"""
Compare simulated pressure trace to the corresponding reactive trace
"""

# System imports
from glob import glob

# Third-party imports
import numpy as np
import matplotlib.pyplot as plt
import yaml
from cansen.profiles import VolumeProfile
import cantera as ct

# Local imports
from .pressure_traces import SimulatedPressureTrace
from .utilities import copy


class Simulation(object):
    """Class for simulations of experiments."""

    def __init__(self, initial_temperature, initial_pressure, is_reactive):
        self.keywords = {}
        self.time = []
        self.temp = []
        self.pres = []
        self.volm = []
        self.load_yaml()
        self.is_reactive = is_reactive
        self.setup_simulation(initial_temperature,
                              initial_pressure,
                              self.is_reactive,
                              )
        self.run_simulation()
        self.process_simulation()

    def load_yaml(self):
        with open('volume-trace.yaml') as yaml_file:
            yaml_data = yaml.load(yaml_file)
            self.comptime = yaml_data['comptime']

    def load_volume_trace(self, filename='volume.csv'):
        """
        Load the volume trace from the file and put it in the proper
        format for `CanSen.profiles.VolumeProfile`.
        """
        data = np.genfromtxt(filename, delimiter=',')
        self.keywords['vproTime'] = data[:, 0]
        self.keywords['vproVol'] = data[:, 1]

    def append_to_data_arrays(self):
        self.time.append(self.netw.time)
        self.temp.append(self.reac.T)
        self.pres.append(self.gas.P/1E5)
        self.volm.append(self.reac.volume)

    def setup_simulation(self,
                         initial_temperature,
                         initial_pressure,
                         is_reactive=True,
                         ):
        self.gas = ct.Solution('species.cti')
        self.gas.TP = initial_temperature, initial_pressure
        if not is_reactive:
            self.gas.set_multiplier(0)
        self.reac = ct.IdealGasReactor(self.gas)
        env = ct.Reservoir(ct.Solution('air.xml'))
        self.load_volume_trace()
        ct.Wall(self.reac, env, A=1.0, velocity=VolumeProfile(self.keywords))
        self.netw = ct.ReactorNet([self.reac])
        self.netw.set_max_time_step(self.keywords['vproTime'][1])
        self.append_to_data_arrays()

    def run_simulation(self, end_Temp=2500, end_time=0.2):
        while self.reac.T < end_Temp and self.netw.time < end_time:
            self.netw.step(1)
            self.append_to_data_arrays()

    def process_simulation(self):
        self.create_pressure_trace()
        self.time = np.array(self.time)
        self.temp = np.array(self.temp)
        self.pres = np.array(self.pres)
        self.volm = np.array(self.volm)

    def create_pressure_trace(self):
        pres_trace = np.core.records.fromarrays(
            np.vstack((self.time, self.pres)),
            names='Time_(sec), Pressure_(bar)',
            formats='f8, f8',
        )
        self.pressure_trace = SimulatedPressureTrace(data=pres_trace)


class CompareToSimulation():
    """
    Compare a reactive pressure trace to the corresponding simulation.

    This function conducts non-reactive and reactive simulations of a
    given experimental case. It relies on the `volume.csv` file
    generated from the `uconnrcmpy.volume_trace.VolumeTraceBuilder`
    class. It compares the simulated pressure traces to the pressure
    trace generated by the same class in the text file with the name
    ending in `pressure.txt`. After the comparison, it copies the
    simulated ignition delay or the EOC temperature to the clipboard.
    """

    def __init__(self, run_reactive=False, run_nonreactive=True):

        # Load the experimental pressure trace. Try the glob function first
        # and if it fails, ask the user for help.
        flist = glob('*pressure.txt')
        if not len(flist) == 1:
            flist = [
                input('Input the experimental pressure trace file name: ')
            ]
        self.expdata = np.genfromtxt(flist[0])
        self.exptime = self.expdata[:, 0]
        self.exppressure = self.expdata[:, 1]
        self.initial_pressure = self.exppressure[0]*1E5
        self.initial_temperature = int(flist[0].split('_')[5].strip('K'))

        if run_nonreactive:
            self.nonreactive_sim = self.run_simulation(is_reactive=False)
        else:
            self.nonreactive_sim = None

        if run_reactive:
            self.reactive_sim = self.run_simulation(is_reactive=True)
        else:
            self.reactive_sim = None

        self.plot_traces()
        self.process_traces()

    def run_simulation(self, is_reactive):
        return Simulation(self.initial_temperature,
                          self.initial_pressure,
                          is_reactive,
                          )

    def process_choice(type):
        choice = input('y or n')
        if choice.startswith('n'):
            return False
        elif choice.startswith('y'):
            return True
        else:
            raise IOError('Invalid input')

    def add_simulation(self, run_reactive=False, run_nonreactive=False):
        if run_reactive:
            if self.reactive_sim is not None:
                if self.process_choice('reactive'):
                    self.reactive_sim = self.run_simulation(
                        is_reactive=True)
                else:
                    print('Nothing was done.')
            else:
                self.reactive_sim = self.run_simulation(
                    is_reactive=True)

        if run_nonreactive:
            if self.nonreactive_sim is not None:
                if self.process_choice('non-reactive'):
                    self.nonreactive_sim = self.run_simulation(
                        is_reactive=False)
                else:
                    print('Nothing was done.')
            else:
                self.nonreactive_sim = self.run_simulation(
                    is_reactive=False)

        self.process_traces()

    def add_nonreactive_simulation(self):
        self.add_simulation(run_nonreactive=True)

    def add_reactive_simulation(self):
        self.add_simulation(run_reactive=True)

    def plot_traces(self):
        # Plot the pressure traces together
        self.fig = plt.figure('Simulation Comparison')
        self.ax = self.fig.add_subplot(1, 1, 1)
        self.ax.plot(self.exptime, self.exppressure)
        if self.nonreactive_sim is not None:
            self.ax.plot(self.nonreactive_sim.time, self.nonreactive_sim.pres)
        if self.reactive_sim is not None:
            self.ax.plot(self.reactive_sim.time, self.reactive_sim.pres)
            self.ax.plot(self.reactive_sim.time,
                         self.reactive_sim.pressure_trace.dpdt/1E6)
        m = plt.get_current_fig_manager()
        m.window.showMaximized()

    def process_traces(self):
        # Compute the temperature at the end of compression and the
        # ignition delay from the corresponding simulated case. Copy
        # them to the clipboard.
        if self.nonreactive_sim is not None:
            T_EOC = np.amax(self.nonreactive_sim.temp)
        if self.reactive_sim is not None:
            ignition_idx = np.argmax(self.reactive_sim.pressure_trace.dpdt)
            ignition_delay = (
                self.reactive_sim.time[ignition_idx]*1000 -
                self.reactive_sim.comptime
            )

        print('{:.0f}, {:.6f}'.format(T_EOC, ign_delay))
        copy('{}\t\t\t\t{}'.format(T_EOC, ign_delay))
